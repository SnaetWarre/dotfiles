#!/bin/bash

# Theme Application Script
# Applies static themes to your system using your existing template system

set -e

# Configuration
THEMES_DIR="$HOME/.config/hypr/themes"
CURRENT_THEME_FILE="$HOME/.config/hypr/current_theme"
CONFIG_DIR="$HOME/.config"

# Check if theme name is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <theme-name>"
    echo "Available themes:"
    ls -1 "$THEMES_DIR" | grep -v "current_theme"
    exit 1
fi

THEME_NAME="$1"
THEME_DIR="$THEMES_DIR/$THEME_NAME"

# Check if theme exists
if [ ! -d "$THEME_DIR" ]; then
    echo "Error: Theme '$THEME_NAME' not found in $THEMES_DIR"
    exit 1
fi

# Check if theme has colors.sh
if [ ! -f "$THEME_DIR/colors.sh" ]; then
    echo "Error: Theme '$THEME_NAME' does not have colors.sh"
    exit 1
fi

echo "Applying theme: $THEME_NAME"

# Export theme name for Neovim
export THEME_NAME="$THEME_NAME"

# Source the theme colors
source "$THEME_DIR/colors.sh"

# Helper function to convert hex to RGB
hex_to_rgb() {
    local hex=${1#"#"}
    local r=$((16#${hex:0:2}))
    local g=$((16#${hex:2:2}))
    local b=$((16#${hex:4:2}))
    echo "$r,$g,$b"
}

# Calculate RGB colors
color0_rgb=$(hex_to_rgb "$color0")
color1_rgb=$(hex_to_rgb "$color1")
color2_rgb=$(hex_to_rgb "$color2")
color3_rgb=$(hex_to_rgb "$color3")
color4_rgb=$(hex_to_rgb "$color4")
color5_rgb=$(hex_to_rgb "$color5")
color6_rgb=$(hex_to_rgb "$color6")
color7_rgb=$(hex_to_rgb "$color7")
color8_rgb=$(hex_to_rgb "$color8")
color9_rgb=$(hex_to_rgb "$color9")
color10_rgb=$(hex_to_rgb "$color10")
color11_rgb=$(hex_to_rgb "$color11")
color12_rgb=$(hex_to_rgb "$color12")
color13_rgb=$(hex_to_rgb "$color13")
color14_rgb=$(hex_to_rgb "$color14")
color15_rgb=$(hex_to_rgb "$color15")

# Export colors for envsubst
export color0 color1 color2 color3 color4 color5 color6 color7 color8 color9 color10 color11 color12 color13 color14 color15
export color0_rgb color1_rgb color2_rgb color3_rgb color4_rgb color5_rgb color6_rgb color7_rgb color8_rgb color9_rgb color10_rgb color11_rgb color12_rgb color13_rgb color14_rgb color15_rgb

# Apply to Waybar
if [ -f "$CONFIG_DIR/waybar/style.css.template" ]; then
    echo "Applying theme to Waybar..."
    envsubst < "$CONFIG_DIR/waybar/style.css.template" > "$CONFIG_DIR/waybar/style.css"
    if pgrep waybar > /dev/null; then
        killall -SIGUSR2 waybar
    else
        echo "  Waybar not running, theme will apply when it starts"
    fi
fi

# Apply to Swaync
if [ -f "$CONFIG_DIR/swaync/style.css.template" ]; then
    echo "Applying theme to Swaync..."
    envsubst < "$CONFIG_DIR/swaync/style.css.template" > "$CONFIG_DIR/swaync/style.css"
    if pgrep swaync > /dev/null; then
        swaync-client -rs
    else
        echo "  Swaync not running, theme will apply when it starts"
    fi
fi

# Apply to eww
if [ -f "$CONFIG_DIR/eww/eww.scss.template" ]; then
    echo "Applying theme to eww..."
    envsubst < "$CONFIG_DIR/eww/eww.scss.template" > "$CONFIG_DIR/eww/eww.scss"
    if pgrep eww > /dev/null; then
        eww reload
    else
        echo "  eww not running, theme will apply when it starts"
    fi
fi

# Apply to Rofi
if [ -f "$CONFIG_DIR/rofi/wallpaper.rasi.template" ]; then
    echo "Applying theme to Rofi..."
    envsubst < "$CONFIG_DIR/rofi/wallpaper.rasi.template" > "$CONFIG_DIR/rofi/wallpaper.rasi"
fi

# Generate Rofi colors
if [ -d "$CONFIG_DIR/rofi" ]; then
    echo "Generating Rofi colors..."
    cat > "$CONFIG_DIR/rofi/colors.rasi" << EOF
/* Generated by theme-apply.sh */
* {
    background:     rgba(${color0_rgb}, 0.90);
    background-alt: rgba(${color1_rgb}, 0.90);
    foreground:     $color7;
    selected:       $color4;
    active:         $color5;
    urgent:         $color3;
}
EOF
fi

# Apply to Swaylock
if [ -f "$CONFIG_DIR/swaylock/config.template" ]; then
    echo "Applying theme to Swaylock..."
    envsubst < "$CONFIG_DIR/swaylock/config.template" > "$CONFIG_DIR/swaylock/config"
fi

# Apply to Wlogout
if [ -f "$CONFIG_DIR/wlogout/style.css.template" ]; then
    echo "Applying theme to Wlogout..."
    envsubst < "$CONFIG_DIR/wlogout/style.css.template" > "$CONFIG_DIR/wlogout/style.css"
fi

# Apply to Ghostty
if [ -f "$CONFIG_DIR/ghostty/config.template" ]; then
    echo "Applying theme to Ghostty..."
    envsubst < "$CONFIG_DIR/ghostty/config.template" > "$CONFIG_DIR/ghostty/config"
fi

# Apply to Neovim (simplified)
echo "Applying theme to Neovim..."
# Save current theme to file for Neovim to read
echo "$THEME_NAME" > "$CURRENT_THEME_FILE"
echo "  Theme name saved for Neovim: $THEME_NAME"

# Apply wallpaper if specified
if [ ! -z "$wallpaper" ] && [ -f "$wallpaper" ]; then
    echo "Setting wallpaper..."
    if command -v swww &> /dev/null; then
        swww img "$wallpaper" || echo "  Warning: Failed to set wallpaper with swww"
    elif command -v swaybg &> /dev/null; then
        killall swaybg 2>/dev/null || true
        swaybg -i "$wallpaper" &
        echo "  Wallpaper set with swaybg"
    elif command -v feh &> /dev/null; then
        feh --bg-fill "$wallpaper" || echo "  Warning: Failed to set wallpaper with feh"
    else
        echo "  Warning: No wallpaper setter found (swww, swaybg, or feh)"
    fi
fi

# Update Firefox theme if pywalfox is available
if command -v pywalfox &> /dev/null; then
    echo "Updating Firefox theme..."
    pywalfox update || echo "  Warning: Failed to update Firefox theme"
fi

# Save current theme
echo "$THEME_NAME" > "$CURRENT_THEME_FILE"

echo "Theme '$THEME_NAME' applied successfully!"
