(defwidget bar []
    (box :class "bar"
         :orientation "h"
         (box :halign "start"
              :valign "center"
              :spacing 10
              :hexpand true
              :space-evenly false
              (workspaces)
         )
         (box :halign "center"
              :valign "center"
              :spacing 10
              :hexpand true
              :orientation "h"
              (time :time get_time)
         )
         (box :halign "end"
              :valign "center"
              :hexpand true
              :space-evenly false
              :spacing 10
              (box :space-evenly false
                        :spacing 7
                        (tray)
                        (volume)
                        (ram)
                        (battery)
                        (eventbox :onhoverlost "bash -c '/usr/bin/eww update wifirev=false && /usr/bin/eww update wifihov=false'"
                                  (wifi)
                        )
              )
              (divider)
              (power)
         )
    )
)

(defvar trayrev false)

(defwidget tray []
    (box :orientation "h"
         :space-evenly false
         (revealer :reveal {trayrev}
                   :transition "slideleft"
                   (box :class "systray-shadow"
                        (systray :space-evenly true :icon-size 16 :prepend-new true)
                   )
         )
         (eventbox :class "tray-button"
                   :width 20
                   :onclick "${trayrev==false?"/usr/bin/eww update trayrev=true":"/usr/bin/eww update trayrev=false"}"
                   :cursor "pointer"
                   (label :class "tray-text" :text "${trayrev==false?"‹":"›"}")
         )
    )
)

(defvar volrev false)


(defwidget volume []
    (eventbox :cursor "pointer"
              :onclick "bash -c 'pavucontrol &'"
              (box :class "volume-short"
                  (box :orientation "h"
                       :space-evenly false
                       :halign "center"
                       :valign "center"
                       (label :class "volume-icon" :text "${get_volume.icon}")
                       (label :class "bsht"
                              :text "${get_volume.volume}%")
                  )
              )
    )
)

(defwidget ram []
    (box :class "ram-short"
        (box :orientation "h"
             :space-evenly false
             :halign "center"
             :valign "center"
             (label :class "ram-icon" :text "")
             (label :class "bsht"
                    :text "${round(EWW_RAM.used_mem_perc,0)}%")
        )
    )
)

(defwidget battery []
    (box :class "battery"
        (box :orientation "h"
             :space-evenly false
             :halign "center"
             :valign "center"
             (box :class "batico-short"
                  (literal :content "${battery_combined.icon}")
             )
             (label :class "bsht"
                    :text "${EWW_BATTERY.BAT0.capacity}%")
        )
    )
)

(defvar wifirev false)
(defvar wifihov false)
(defvar wifictlrev false)

(defpoll wifistatus :interval "1s" :initial "{\"icon\": \"睊\", \"ssid\": \"Disconnected\", \"strength\": 0}"
    "./scripts/current-wifi.sh"
)

(defwidget wifi []
    (box :class "wifi"
        (eventbox :cursor "pointer"
                  :onhover "./scripts/wifi-delay.sh"
                  :onhoverlost "bash -c '/usr/bin/eww update wifirev=false && /usr/bin/eww update wifihov=false'"
                  :onclick "${ctlrev==true?"./scripts/usrctl.sh && ./scripts/wifictl.sh":"./scripts/wifictl.sh"}"
                  (box :orientation "h"
                       :space-evenly false
                       (label :text "${wifistatus.icon}")
                       (label :class "space-wifi" :text "\\u00A0")
                       (revealer :reveal {wifirev||wifictlrev?true:false}
                                 :transition "slideright"
                                 :duration "350ms"
                                 (box :class "wifi-type" :space-evenly false
                                      (label :class "wifi-div" :text "|")
                                      (label :limit-width 12 :text "${wifistatus.ssid}")
                                 )
                       )

                  )
        )
    )
)

(defpoll network :interval "3s"
        "./scripts/getnet.sh"
)

(defwidget wifi_event []
    (eventbox :class "shadow-container"
              :onhoverlost "./scripts/wifictl.sh"
              (box :orientation "v"
                   :space-evenly false
              (box :class "wifictl-container"
                   :space-evenly false
                   :orientation "v"
                   (box :class "wifi-header"
                        :space-evenly false
                        (label :text "Network Manager")
                   )
                   (box :class "wifi-stats"
                        :space-evenly false
                        (label :text "STATUS : ")
                        (label :class "${wifistatus.ssid=="Disconnected"?"nocon":"yescon"}"
                               :limit-width 27
                               :text  "${wifistatus.ssid=="Disconnected"?" Disconnected":" Connected to ${wifistatus.ssid}"}")
                   )
                   (scroll :vscroll true
                           :class "network-container"
                           (box :orientation "v" :space-evenly false
                                (for i in {network}
                                    (wifi-option :ssid "${i.ssid}" :inuse "${i.in_use}" :auto {i.autoconnect})
                                )
                           )
                   )
              )
              (revealer :reveal {wificonfigrev}
                        :transition "slidedown"
                        :duration "350ms"
                        (eventbox :onhoverlost "/usr/bin/eww update wificonfigrev=false"
                                  (box :class "wifictl-container"
                                       :space-evenly false
                                       :orientation "v"
                                       (box :class "swifi-header"
                                            :space-evenly false
                                            (label :text "${wifissidrev}")
                                       )
                                       (box :class "wifi-bcon"
                                            :orientation "h"
                                            :visible {wificlass=="1"?true:false}
                                            (box :class "wifi-buttons"
                                            (input :password true
                                                   :space-evenly false
                                                   :class "iwifi"
                                                   :height 30
                                                   :onaccept "/usr/bin/eww update wificonfigrev=false && nmcli device wifi connect \"${wifissidrev}\" password \"{}\""
                                            ))
                                       )
                                       (box :orientation "h"
                                            :spacing 10
                                            :visible {wificlass=="2"?true:false}
                                            :class "wifi-bcon"
                                            (eventbox :cursor "pointer"
                                                      :height 30
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli device wifi connect \"${wifissidrev}\""
                                                      (label :text "Connect")
                                            )
                                            (eventbox :cursor "pointer"
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli connection delete \"${wifissidrev}\""
                                                      (label :text "Remove")
                                            )
                                       )
                                       (box :orientation "h"
                                            :spacing 10
                                            :visible {wificlass=="3"?true:false}
                                            :class "wifi-bcon"
                                            (eventbox :cursor "pointer"
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli device disconnect wlp0s20f3"
                                                      :height 30
                                                      (label :text "Disconnect")
                                            )
                                            (eventbox :cursor "pointer"
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli connection delete \"${wifissidrev}\""
                                                      (label :text "Remove")
                                            )
                                       )
                                  )
                        )
              ))

    )
)

(defvar wificonfigrev false)
(defvar wifissidrev "")
(defvar wificlass "")

(defwidget wifi-option [ssid auto inuse]
    (eventbox :cursor "pointer"
              :onclick "/usr/bin/eww update wificonfigrev=false && /usr/bin/eww update wificonfigrev=true && /usr/bin/eww update wificlass=${auto==false?"1":inuse==false?"2":"3"} && /usr/bin/eww update wifissidrev=\"${ssid}\""
              (box :class "wifi-option-box"
                   :orientation "v"
                   (box :class "wifi-ssid"
                        :space-evenly false
                        :orientation "h"
                        (label :class "${auto==false?"wifi-ssid-01":inuse==false?"wifi-ssid-02":"wifi-ssid-03"}"
                               :limit-width 30
                               :text "${ssid}"
                        )
                   )
               )
    )
)

(defwindow wifictl
    :monitor 0
    :stacking "overlay"
    :focusable false
    :geometry (geometry :anchor "top right"
                        :x "5px"
                        :y "-14px"
                        :width "425px"
                        :height "440px"
    )
    (expander :expanded true
              (revealer :transition "slidedown"
                        :reveal wifictlrev
                        :duration "350ms"
                        (wifi_event)
              )
    )
)






(defwidget power []
    (box :class "power"
         :orientation "h"
         (eventbox :onclick "./scripts/usrctl.sh"
                   :cursor "pointer"
                   :class "power-eventbox"
                   (label :text "󰻃 ")
         )
    )
)

(defwidget workspaces []
    (literal :content workspaces-output)
)

(deflisten workspaces-output :initial "(box :class \"ws\" :halign \"end\" :orientation \"h\" :spacing 5 :space-evenly \"false\" (eventbox :onclick \"hyprctl dispatch workspace 1\" :cursor \"pointer\" :class \"free\" (label :text \"•\")) (eventbox :onclick \"hyprctl dispatch workspace 2\" :cursor \"pointer\" :class \"free\" (label :text \"•\")) (eventbox :onclick \"hyprctl dispatch workspace 3\" :cursor \"pointer\" :class \"free\" (label :text \"•\")) (eventbox :onclick \"hyprctl dispatch workspace 4\" :cursor \"pointer\" :class \"free\" (label :text \"•\")) (eventbox :onclick \"hyprctl dispatch workspace 5\" :cursor \"pointer\" :class \"free\" (label :text \"•\")))"
    "./scripts/workspace.sh"
)

(defwidget divider []
    (label :class "div" :text "|")
)

(defwindow calendar
    :monitor 0
    :stacking "overlay"
    :geometry (geometry :anchor "top center"
                        :y "-15px"
                        :width "355px"
                        :height "41%"
    )
    (expander :expanded true
              (revealer :transition "slidedown"
                        :reveal calrev
                        :duration "350ms"
                        (calendar_event)
              )
    )
)

(defvar calrev false)

(defwidget calendar_event []
    (eventbox :onhoverlost "./scripts/calendar.sh"
         (calendar_widget :time get_time
                          :date get_date
         )
    )
)

(defwidget calendar_widget[time date]
    (box :class "calendar-container"
         :orientation "v"
         :spacing 16
         :space-evenly false
         (box :class "time-box"
              :orientation "v"
              :halign "center"
              :space-evenly false
              (box :class "time-inner"
                   (label :text "${time}")
              )
              (box :class "date-inner"
                   (label :text "${date}")
              )
         )
         (box :class "calendar-box"
              :halign "center"
              (calendar :class "cal")
         )
    )
)

(defwidget time [time]
    (eventbox :cursor "pointer"
              :onclick "./scripts/calendar.sh"
              :width 120
              :height 25
              :class "time-label"
              (label :text "${time}")
    )
)

(defpoll get_date :interval "1s"
                  "date +'%d.%m.%Y, %A'"
)

(defpoll get_time :interval "1s"
                  "date +%H:%M:%S"
)

(defpoll get_uptime :interval "1s"
                  "uptime -p"
)

(defwindow usrctl
    :monitor 0
    :stacking "overlay"
    :geometry (geometry :anchor "top right"
                        :x "5px"
                        :y "-4px"
                        :width "425px"
                        :height "993px"
    )
    (box :space-evenly false
         :halign "end"
              (revealer :transition "slideleft"
                        :reveal ctlrev
                        :duration "350ms"
                        (usrctl-widget :uptime get_uptime)
              )
    )
)

(defvar ctlrev false)

(defwidget usrctl-widget [uptime]
    (box :space-evenly false
         :valign "start"
    (eventbox :class "shadow-container"
         :onhoverlost "./scripts/usrctl.sh"
         (box :orientation "v"
              :space-evenly false
         (box :class "main-container"
              :orientation "v"
              :halign "center"
              :space-evenly false
              (box :class "profile-container"
                   :space-evenly false
                   (box :class "profile"
                        :space-evenly false
                        :valign "start"
                        :halign "start"
                        (box :class "pfp")
                        (box :class "pfp-text"
                             :orientation "v"
                             :space-evenly false
                             (box :class "username"
                                  :space-evenly false
                                  (label :text "Warre")
                             )
                             (box :class "uptime"
                                  :space-evenly false
                                  (label :limit-width 25 :text "${uptime}")
                             )
                             (box :class "ctlpanel"
                                  (eventbox :cursor "pointer"
                                            :class "shutdown"
                                            :onclick "systemctl poweroff"
                                            :tooltip " Shutdown "
                                            (label :text "⏻")
                                  )
                                  (eventbox :cursor "pointer"
                                            :class "logout"
                                            :onclick "hyprctl dispatch exit"
                                            :tooltip " Logout "
                                            (label :text "")
                                  )
                                  (eventbox :cursor "pointer"
                                            :class "lockscr"
                                            :onclick "./scripts/lock.sh"
                                            :tooltip " Lock "
                                            (label :text "\\uf023")
                                  )
                                  (eventbox :cursor "pointer"
                                            :class "reboot"
                                            :onclick "systemctl reboot"
                                            :tooltip " Reboot "
                                            (label :text "\\uf021")
                                  )

                             )
                        )
                   )
              )
              (box :class "monitor-container"
                   :orientation "v"
                   :space-evenly false
                   (box :class "sysctl"
                        :orientation "v"
                        :space-evenly false
                        (box :class "bats"
                             :space-evenly false
                             (box :class "batico-main"
                                  (literal :content "${battery_combined.icon}")
                             )
                             (box :class "bat-detail"
                                  :orientation "v"
                                  (box :class "bat-percent"
                                       :space-evenly false
                                       (label :text "Battery ${EWW_BATTERY.BAT0.capacity}%")
                                  )
                                  (box :class "bat-status"
                                       :space-evenly false
                                       (label :limit-width 26 :text "${battery_combined.status}")
                                  )
                             )
                        )
                        (box :class "divider-h")
                        (box :class "sys"
                            (box :class "cpu-box"
                                 :orientation "v"
                                 :space-evenly false
                                 (eventbox :class "cpu-hover"
                                           :tooltip " ${round(EWW_CPU.avg,1)}% used "
                                           (circular-progress :class "cpu"
                                                    :value {round(EWW_CPU.avg,10)}
                                                    :thickness 5
                                                    (box :class "cpuico"
                                                        (label :text " ")
                                                    )
                                           )
                                 )
                                 (box :class "cpu-text"
                                      :space-evenly false
                                      :halign "center"
                                      (box :class "cpu01"
                                        "CPU "
                                      )
                                      (box :class "cpu02"
                                        "${round(EWW_CPU.avg,0)}%"
                                      )
                                 )
                            )
                            (box :class "ram-box"
                                 :orientation "v"
                                 :space-evenly false
                                 (eventbox :class "ram-hover"
                                           :tooltip " ${round(EWW_RAM.used_mem/1073741824,1)}GB used "
                                           (circular-progress :class "ram"
                                                    :value {round(EWW_RAM.used_mem_perc,10)}
                                                    :thickness 5
                                                    (box :class "ramico"
                                                         (label :text " ")
                                                    )
                                           )
                                 )
                                 (box :class "ram-text"
                                      :space-evenly false
                                      :halign "center"
                                      (box :class "ram01"
                                        "RAM "
                                      )
                                      (box :class "ram02"
                                        "${round(EWW_RAM.used_mem_perc,0)}%"
                                      )
                                 )
                            )
                            (box :class "disk-box"
                                 :orientation "v"
                                 :space-evenly false
                                 (eventbox :class "disk-hover"
                                           :tooltip " ${round(EWW_DISK["/"].used/1073741824,1)}GB used "
                                           (circular-progress :class "disk"
                                                    :value {round(EWW_DISK["/"].used_perc,10)}
                                                    :thickness 5
                                                    (box :class "diskico"
                                                         (label :text " ")
                                                    )
                                           )
                                 )
                                 (box :class "disk-text"
                                      :space-evenly false
                                      :halign "center"
                                      (box :class "disk01"
                                        "DISK "
                                      )
                                      (box :class "disk02"
                                        "${round(EWW_DISK["/"].used_perc,0)}%"
                                      )
                                 )
                            )
                        )
                        (box :class "sliderctl"
                             :orientation "v"
                             :spacing 15
                             (box :class "volume-slider"
                                  :space-evenly false
                                  :halign "center"
                                  (label :text "${get_volume.icon}")
                                  (scale :class "vol"
                                         :value {get_volume.volume}
                                         :max 101
                                         :min 0
                                         :round-digits 0
                                         :onchange "pamixer --set-volume {}"
                                  )
                             )
                             (box :class "light-slider"
                                  :space-evenly false
                                  :halign "center"
                                  (label :text "")
                                  (scale :value get_light
                                         :class "lig"
                                         :max 101
                                         :min 1
                                         :round-digits 0
                                         :onchange "brightnessctl set {}%"
                                  )
                             )
                        )
                   )
              )
         )
         (music-player)
         )
    ))
)

(deflisten battery_combined "./scripts/battery_combined.sh")
(deflisten music :initial "{}" "./scripts/music.sh")
(deflisten pmusic :initial "{}" "./scripts/pmusic.sh")

(defpoll cmusic :interval "1s"
    "playerctl -l"
)

(defpoll get_light :interval "1s"
  "brightnessctl -m | awk -F, '{gsub(/%/, \"\", \$4); print \$4}'"
)

(deflisten get_volume :initial "{\"icon\": \"󰕾\", \"volume\": 50}"
    "./scripts/getvol.sh"
)



(defwidget music-player []
    (revealer :transition "slidedown"
                   :reveal {"${cmusic}" == "" || "${music.title}" == "" ? false : true}
         (box :class "music-container"
              :space-evenly false
              :orientation "v"
              (box :class "music-title"
                   :orientation "h"
                   :space-evenly false
                   (box :class "music-thumbnail"
                        :style "background-image: url('${music.thumbnail}');"
                   )
                   (box :class "music-desc"
                        :orientation "v"
                        :space-evenly false
                        (label :class "main-title" :halign "start" :limit-width 21 :text "${music.title}")
                        (label :class "artist" :halign  "start" :limit-width 31 :text "By ${music.artist}")
                   )
              )
              (scale :class "music-slider"
                     :min 0
                     :max {music.length}
                     :value {pmusic.position}
                     :onchange "playerctl position {}"
              )
              (box :class "music-timer"
                   (label :halign "start" :text "${pmusic.positionStr}")
                   (label :halign "end" :text "${music.lengthStr}")
              )
              (box :class "music-action"
                   :orientation "h"
                   :space-evenly false
                   :halign "center"
                   :spacing 45
                   (eventbox :class "mico" :cursor "pointer" :onclick "playerctl previous" "󰒮")
                   (eventbox :class "mico" :cursor "pointer" :onclick "playerctl play-pause" {music.status == "Playing" ? "󰓛" : "󰐊"})
                   (eventbox :class "mico" :cursor "pointer" :onclick "playerctl next" "󰒭")
              )
         ))

)

(defwindow bar_widget
    :monitor 0
    :stacking "bg"
    :geometry (geometry :anchor "top center"
                        :width "100%"
                        :height "45px"
    )
    :exclusive true
    (bar)
)
